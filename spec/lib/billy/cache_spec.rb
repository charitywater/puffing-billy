require 'spec_helper'

describe Billy::Cache do
  describe 'format_url' do
    let(:cache) { Billy::Cache.instance }
    let(:params) { '?foo=bar' }
    let(:callback) { '&callback=quux' }
    let(:fragment) { '#baz' }
    let(:base_url) { 'http://example.com' }
    let(:fragment_url) { "#{base_url}/#{fragment}" }
    let(:params_url) { "#{base_url}#{params}" }
    let(:params_url_with_callback) { "#{base_url}#{params}#{callback}" }
    let(:params_fragment_url) { "#{base_url}#{params}#{fragment}" }

    context 'with ignore_params set to false' do
      it 'is a no-op if there are no params' do
        expect(cache.format_url(base_url)).to eq base_url
      end
      it 'appends params if there are params' do
        expect(cache.format_url(params_url)).to eq params_url
      end
      it 'appends params and fragment if both are present' do
        expect(cache.format_url(params_fragment_url)).to eq params_fragment_url
      end
      context "when dynamic_jsonp is true" do
        it 'omits the callback param by default' do
          expect(cache.format_url(params_url_with_callback, false, true)).to eq params_url
        end

        it 'omits the params listed in Billy.config.dynamic_jsonp_keys' do
          allow(Billy.config).to receive(:dynamic_jsonp_keys) { ["foo"] }

          expect(cache.format_url(params_url_with_callback, false, true)).to eq "#{base_url}?callback=quux"
        end
      end

      it 'retains the callback param is dynamic_jsonp is false' do
        expect(cache.format_url(params_url_with_callback)).to eq params_url_with_callback
      end
    end

    context 'with ignore_params set to true' do
      it 'is a no-op if there are no params' do
        expect(cache.format_url(base_url, true)).to eq base_url
      end
      it 'omits params if there are params' do
        expect(cache.format_url(params_url, true)).to eq base_url
      end
      it 'omits params and fragment if both are present' do
        expect(cache.format_url(params_fragment_url, true)).to eq base_url
      end
    end
  end

  describe 'key' do
    let(:cache) { Billy::Cache.instance }
    let(:url) { 'http://example.com/example_request?a=b&c=d'}
    let(:body) { "body text" }
    let(:method) { "get" }

    context 'with the default key generator' do
      context 'when not ignoring params' do
        it 'returns a hash for the url' do
          expect(cache.key(method, url, body)).to eq "get_example.com_1bd152887446a4b9784e2825571c0ca8bb61906b"
        end
      end

      context 'when ignoring params' do
        before { allow(Billy.config.ignore_params).to receive(:include?) { true } }
        it 'returns a different hash for the url' do
          expect(cache.key(method, url, body)).to eq "get_example.com_384e6ad9be35e18bb00d5ddefe58655119d07840"
        end
      end
    end

    context 'with a custom key generator defined' do
      before do
        allow(Billy.config.key_generators).to receive(:[]).with("example.com") do
          ->(method, url, body) { "#{method}-#{url.host}" if method == 'get' }
        end
      end

      it 'returns the hash generated by the key generator for a specified URL' do
        expect(cache.key(method, url, body)).to eq 'get-example.com'
      end

      it 'returns the default hash key for a url when the key generator returns nil' do
        expect(cache.key('post', url, body)).to eq 'post_example.com_1bd152887446a4b9784e2825571c0ca8bb61906b8fe8c3d40e967714951a71b824a0471440aa3d5b'
      end
    end
  end
end
